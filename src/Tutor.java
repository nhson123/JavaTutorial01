import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonObject;
import klassen.*;
import klassen.Automat.Automat;
import klassen.Database.HsqlDB;
import klassen.Json.Json;
import klassen.String.StringRegex;
import klassen.Tree.Tree;
import klassen.annotations.Nokia;
import klassen.annotations.SmartFone;
import klassen.java8.Lamda;
import klassen.dateiHangling.DateinLesen;
import klassen.dateiHangling.TxTDateiSchreiben;
import klassen.enums.Enum;
import klassen.java8.Time8;
import klassen.klassenTest.SubInitializer;
import klassen.neureNetze.NeuroNetz;
import klassen.tiere.*;
import mainPackage.Methode;
import mainPackage.Rekursion;

import java.io.IOException;
import java.lang.annotation.Annotation;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Arrays;

/**
 * Package: PACKAGE_NAME
 * Generated by: Hoang.Son.Nguyen
 * Generated at: 06.02.2018 2018
 */
public class Tutor {

    static Integer counter = 0;

    public static void main(String[] args) throws IOException {

        /**
         * Methode
         */
        boolean bool = false;
        Methode method = new Methode();
        if (!bool) {
            method.printMonat("1");
        }
        method.Schleife(20);
        /**
         * Rekursion
         */
        Rekursion rek = new Rekursion();
        rek.loop(10);
        /**
         * Computer
         */
        Computer comp = new Computer("AMD", "Medion", 8, 300);
        comp.getPrice();
        System.out.println(comp.datenBlatt());
        /**
         * Notebook
         */
        Notebook note = new Notebook("Intel", "MX", 4, 1300, 1, false);
        note.getPrice();
        System.out.println(note.datenBlatt());
        /**
         * Convertible
         */
        Convertible convert = new Convertible("Intel", "MX", 4, 1300, 1, true);
        note.getPrice();
        System.out.println(convert.datenBlatt());
        Computer comp1 = note;
        System.out.println(comp1.datenBlatt());
        /**
         * GenericTier
         */
        Generic generic = new Generic();
        generic.printList(generic.generickList());

        /**
         * EingabenLlsen
         */
        //TastaturLesen tast = new TastaturLesen();
        //tast.printEingaben(tast.einlesen());

        /**
         * DateiLesen
         */
        DateinLesen dat = new DateinLesen();
        dat.printDatei(dat.lesen("dateiZumAuslesen.txt"));
        /**
         * DateinSchreiben
         */
        //DateinSchreiben dats = new DateinSchreiben();
        //dats.printDatei(dats.Schreiben("testSchreiben.txt"));
        /**
         * Fehlerbehandlung
         *
         */
        Fehlerbehandlung fehler = new Fehlerbehandlung();
        fehler.printDatei(fehler.lesen("testSchreiben.txt"));
        /**
         * CustomerThread
         */
        CustomerThread cusThread0 = new CustomerThread("Thread 0", counter);
        CustomerThread cusThread1 = new CustomerThread("Thread 1", counter);
        System.out.println(cusThread0.getClass().getName());
        cusThread0.start();
        cusThread1.start();


        try { // main Methode wartet bis alle Threads durch sind, ansonsten wird main Thread als erster fertig sein
            cusThread0.join();
            cusThread1.join();
        } catch (InterruptedException e) {
            e.printStackTrace();

        }
        System.out.println("Ende aller Threads");
/**
 * Tiere
 */
        System.out.println("Tiere!");
        ArrayList<Tier> tiere = new ArrayList<Tier>();
        Hund hund = new Hund();
        tiere.add(new Hund());
        tiere.add(hund.clone());
        tiere.add(new Katze());
        tiere.add(new Tier() {
            @Override
            public void voice() {
                System.out.println("oi gioi oi!, Beine: " + super.getBeine()); //Super kommt von Oberklasse
            }
        });
        tiere.add((Tier) new Katze());
        for (Tier i : tiere) {
            i.voice(); // Voice in aktuellen Tier
            if (i instanceof Hund) {
                i.doSomething(2);
                System.out.println("Parameter: " + i.tierArt);  // Para von SuperClass
                System.out.println(i.getTierArt());  // Methode von instanceClass

            }
            if (i instanceof Katze) {
                if (!i.isKasttrtion()) System.out.println(" Nicht kastriert");
                ;
            }
            System.out.println(i.getTierArt().toString());
        }
        /**
         * Initializer
         */
        Initializer ini = new Initializer();
        /**
         * Super Subintitializer
         */
        System.out.println("");
        SubInitializer subIn = new SubInitializer();
        System.out.println("");
        SubInitializer subInPara = new SubInitializer(1);

        /**
         * InnerClass
         */
        InnerClass inner = new InnerClass();
        inner.print();
        InnerClass.NestedClass nestedClass = inner.new NestedClass();
        nestedClass.nestedY();

        /**
         * Swing
         */
//        EventQueue.invokeLater(new Runnable() {
//            @Override
//            public void run() {
//                Fenster fenster = new Fenster();
//                fenster.setVisible(true);
//            }
//        });

        /**
         * GenericTier
         */
        GenericTier gen = new GenericTier<Katze, Hund>();
        ArrayList<ArrayList> x = new ArrayList<>();
        x.add(tiere);
        gen.printTierList(tiere);
        gen.makeList(x);
        /**
         *TxTDateiSchreiben
         */
        TxTDateiSchreiben txTDateiSchreiben = new TxTDateiSchreiben();
        txTDateiSchreiben.fileWriter("txtFileSchreiben");

        /**
         * ZwischenAblage
         */
        //ZwischenAblage zwischenAblage = new ZwischenAblage();
        //zwischenAblage.zwichenAblageAusgeben();
        /**
         * Drucken
         */
        // Drucken drucken = new Drucken();
        //drucken.printerJob();
        /**
         * Timer
         */
        Time time = new Time();
        time.timing();
        /**
         * Timer 8
         *
         */
        Time8 time8 = new Time8();
        time8.timing8();
        /**
         * Hashsets
         */
        HashSets hashSets = new HashSets();
        hashSets.hashSetAusgabe();
        /**
         * TreeSet
         */
        TreeSets treeSets = new TreeSets();
        System.out.println(treeSets.getClass().getName());
        treeSets.treeSetAusgeben();
        /**
         * TreeMap
         */
        HashMaps hashMaps = new HashMaps();
        hashMaps.hashMapOperation();

        /**
         * Reflection
         */
        Reflection reflec = new Reflection();
        reflec.reflectionTier();
        /**
         * Mainlogger
         */
        MainLogger mainLogger = new MainLogger();
        mainLogger.logWriter();
        /**
         * RSA
         */
        RSA_Verschluesselung rsa = new RSA_Verschluesselung();
        rsa.gen();
        byte[] enc = rsa.encrypt("ich bin ein Teufelskerl", rsa.key.getPublic());
        System.out.println("Verschlüsselter String: " + new String(enc));
        System.out.println("Enschlüsselter String: " + rsa.decrypt(enc, rsa.key.getPrivate()));

        /**
         * WebCrawler
         */
        WebCrawler webCrawler = new WebCrawler();
        webCrawler.siteCrawler("https://www.youtube.com");
        /**
         * Server
         */
        /*Server server = new Server(9090);
        server.serverRun();*/
        /**
         * Lamda
         */
        Lamda lamda = new Lamda();
        lamda.lamdaAusdruck(2, 5);
        /**
         * NeuroNetze
         */
        NeuroNetz neuroNetz = new NeuroNetz();
        neuroNetz.neuroNetze();
        /**
         * Enums
         */
        Enum enums = new Enum();
        enums.enumTest0(Enum.Alkohol.BANNANE, 2, 48);
        enums.enumTest1(4, 6);
        /**
         * Annotation
         */
        Nokia nokia = new Nokia();
        Class cla = nokia.getClass();
        Annotation ann = cla.getAnnotation(SmartFone.class);
        SmartFone smartFone = (SmartFone) ann;
        System.out.println(smartFone.getClass().getName() + " OS: " + smartFone.os() + " Vesion:" + smartFone.version());
        /**
         * StringRegex
         */
        StringRegex regex = new StringRegex();
        System.out.println("Regex: " + Arrays.toString(regex.stringRegexSplit("      123, 23 ,2,4, 12 3,     out")).replaceAll(" +", ""));
        String regexed = regex.stringBlanc("   123, 23, 2,4 , 12 3,  out");
        for (String i : regex.stringRegexSplit(regexed)) {
            System.out.println(i);
        }
        /**
         * Automat
         */
        Automat auto = new Automat();
        auto.sendInput("10001010101");
        /**
         * Clone
         */
        Katze katze = new Katze();
        Mensch mensch = new Mensch("Son", 40);
        katze.setHerrl(mensch);
        Katze cloneKatze = katze.clone();
        cloneKatze.herrl.setName("SonUpdate");
        System.out.println("Herechen von Clone: " + cloneKatze.getHerrl().getName() + " gegen original: " + katze.getHerrl().getName());


        /**
         * Properties
         */
        Propertieses pros = new Propertieses();
        //pros.ProsWrite();
        pros.ProsRead();
        /**
         * DB
         */
        HsqlDB conn = new HsqlDB();
        ResultSet rs = conn.HsqlCall(("SELECT * FROM Unternehmen"));
       /* ResultSet rs = conn.HsqlCall(("CREATE TABLE Unternehmen (\n" +
                "    UnternehmenID int,\n" +
                "    Name varchar(255),\n" +
                "    Branch varchar(255),\n" +
                "    Address varchar(255),\n" +
                "    Rechtsform varchar(255) \n" +
                ")"));*/
        /**
         * Baum
         */
        Tree tree = new Tree();
        tree.insert(5);
        tree.insert(4);
        tree.insert(6);
        tree.insert(3);
        tree.insert(7);
        tree.insert(0);
        tree.insert(0);
        System.out.println("Baumgröße: " + tree.nodeCount());
        System.out.println("Baumhöhe: " + tree.treeHight());
        System.out.println("Baum als Stringausgabe: " + tree.baumToString());

/**
 * JsonObject Beispiele
 */
        Json json = new Json();
        System.out.print(json.getClass().getName()+" :");
        try {
            System.out.println(json.JsonReadFile("InputJson.json"));
            JsonObject jsonObject = json.JsonReadFile("InputJson.json");
            System.out.println(json.JsonAdd(jsonObject,"Nachname","Nguyen"));
        } catch (Exception e) {
            e.printStackTrace();
        }

        Hund jHund = new Hund();
        jHund.setHerrl(new Mensch("Nguyen Hoang Son", 47));
        jHund.setKasttrtion(true);
        jHund.setTierArt("Kampfhund");
        jHund.setBedroth(true);
        jHund.setHausTier(true);
        jHund.setName("AgostinoHund");
        jHund.setHerrchen(1);
        ArrayList list =new ArrayList<Integer>(){{
            add(123);
            add(234);
            add(456);
        }};
        jHund.setRegisterNr(list);
        System.out.println(json.objectToJson(jHund,"JsonFromObject.json"));
        Hund hundj = (Hund)json.jsonToObject("JsonFromObject.json");
        System.out.println(hundj.name);

    }
}
