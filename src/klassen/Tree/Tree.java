package klassen.Tree;

/**
 * Package: klassen.Tree
 * Generated by: Hoang.Son.Nguyen
 * Generated at: 06.03.2018 2018
 */
public class Tree {
    Node root = null;

    public Tree() {
        root = null;
    }

    public void insert(int wert) {
        if (root == null) {
            root = new Node(wert, null);
        } else { // Baum ist schon gepflanzt
            insert(wert, root);
        }
    }

    private void insert(int wert, Node parent) { // links oder doch rechts an den parent/root
        if (parent.wert > wert) {
            if (parent.links == null) { // parent hat keinen Links
                parent.links = new Node(wert, parent);
            } else { // parent hat links -> rekursiv insert auf parent.links
                insert(wert, parent.links);
            }

        } else {
            if (parent.rechts == null) {
                parent.rechts = new Node(wert, parent);
            } else {
                insert(wert, parent.rechts);
            }
        }
    }

    public int nodeCount() {
        if (root == null) { // bei leerem Baum
            return 0;
        } else {
            return 1 + nodeCount(root.links) + nodeCount(root.rechts);
        }
    }

    private int nodeCount(Node node) {
        if (node == null) {
            return 0;
        } else {
            return 1 + nodeCount(node.links) + nodeCount(node.rechts);
        }
    }

    public int treeHight() {
        int l = 0;
        int r = 0;
        if (root.links != null) {
            l = treeHight(root.links) + 1;
        }
        if (root.rechts != null) {
            r = treeHight(root.rechts) + 1;
        }
        return Math.max(l, r);
    }

    private int treeHight(Node node) {
        int l = 0;
        int r = 0;
        if (node.links != null) {
            l = treeHight(node.links) + 1;
        }
        if (node.rechts != null) {
            l = treeHight(node.rechts) + 1;
        }
        return Math.max(l, r);
    }

    public String baumToString(){
        if(root == null){
            return "leerer Baum";
        }
        else {
            return baumToString(root.links) + " |" +root.wert + "| " + baumToString(root.rechts);
        }
    }

    private String baumToString(Node node) {
        if(node == null){
            return "";
        }
        else {
            return baumToString(node.links) + " " +node.wert + " " + baumToString(node.rechts);
        }
    }
    public void treeBalance(){

    }
}
