package klassen.tiere;

import java.util.ArrayList;

/**
 * Package: klassen.tiere
 * Generated by: Hoang.Son.Nguyen
 * Generated at: 02.02.2018 2018
 */
public abstract class Tier implements Cloneable {
    public ArrayList<Integer> registerNr;

    public void setRegisterNr(ArrayList<Integer> registerNr) {
        this.registerNr = registerNr;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getHerrchen() {

        return herrchen;
    }

    public String name;

    public Mensch herrl;

    private int herrchen = 1;

    public Mensch getHerrl() {
        return herrl;
    }

    public void setHerrl(Mensch herrl) {
        this.herrl = herrl;
    }

    public String tierArt = "ein Tier";

    public boolean isKasttrtion() {
        return kasttrtion;
    }

    public boolean kasttrtion;

    public int getBeine() {
        return beine;
    }

    public void setKasttrtion(boolean kasttrtion) {
        this.kasttrtion = kasttrtion;
    }

    int beine;

    public boolean isHausTier() {
        return hausTier;
    }

    public void setBeine(int beine) {
        this.beine = beine;
    }

    public boolean isBedroth() {
        return bedroth;
    }

    boolean hausTier;
    boolean bedroth;

    public void setHausTier(boolean hausTier) {
        this.hausTier = hausTier;
    }

    public void setBedroth(boolean bedroth) {
        this.bedroth = bedroth;
    }

    public String getTierArt() {
        return tierArt;
    }

    public void setTierArt(String tierArt) {
        this.tierArt = tierArt;
    }

    public abstract void voice();

    public void doSomething(int i) {
        System.out.println("Super Dosomething: " + i);
        if (i == 0) {
            return;
        } else this.doSomething(i - 1);
    }

    public boolean kastrieren() {
        kasttrtion = true;
        return kasttrtion;
    }

    /**
     * Zu achhten: clone werden nur Daten der 1. Ebenen. also primitive DatenType.
     * bei komplexen werden nur Zieger geklonnt. Objekt bleibt das selbe :(
     * LÃ¶sung: komplexe Typen sollen auch clone() methode erhalten.
     */
    @Override
    public Tier clone() {
        try {
            return (Tier) super.clone();
        } catch (CloneNotSupportedException e) {
            e.printStackTrace();
            return null;
        }

    }
}
