package klassen.neureNetze;

import com.dkriesel.snipe.core.NeuralNetwork;
import com.dkriesel.snipe.core.NeuralNetworkDescriptor;
import com.dkriesel.snipe.training.ErrorMeasurement;
import com.dkriesel.snipe.training.TrainingSampleLesson;

/**
 * Package: klassen.neureNetze
 * Generated by: Hoang.Son.Nguyen
 * Generated at: 18.02.2018 2018
 */
public class NeuroNetz {
    public void neuroNetze() {
        NeuralNetworkDescriptor neuralNetworkDescriptor = new NeuralNetworkDescriptor(4, 2, 4);
        neuralNetworkDescriptor.setSettingsTopologyFeedForward();

        NeuralNetwork neuralNetwork = new NeuralNetwork(neuralNetworkDescriptor);

        double[][] intput = new double[][]{{1, 1, 0, 1}, {1, 1, 0, 0}};
        double[][] output = new double[][]{{0, 0, 0, 0}, {0, 0, 0, 0}};

        TrainingSampleLesson lesson = new TrainingSampleLesson(intput, output);

        System.out.println(getClass().getName()+" Vor: "+ErrorMeasurement.getErrorRootMeanSquareSum(neuralNetwork,lesson));
        neuralNetwork.trainBackpropagationOfError(lesson,1000, 0.2);
        System.out.println(getClass().getName()+" Nach: "+ErrorMeasurement.getErrorRootMeanSquareSum(neuralNetwork,lesson));

        double[]out =  neuralNetwork.propagate( new double[]{9,1,1,9});
        for(int i = 0; i< out.length; i++){
            System.out.println(out[i]+",");
        }
    }
}